make -C O.linux-x86_64 -f ../Makefile TOP=../../.. T_A=linux-x86_64 install
make[1]: Entering directory `/home/hg/pvaPy/src/easypva/O.linux-x86_64'

/usr/bin/g++ -c  -D_POSIX_C_SOURCE=199506L -D_POSIX_THREADS -D_XOPEN_SOURCE=500           -D_X86_64_  -DUNIX  -D_BSD_SOURCE -Dlinux  -D_REENTRANT   -O3   -Wall      -m64     -fPIC -MMD -g  -I/include -DPVA_API_VERSION=440 -DPVA_RPC_API_VERSION=440 -I/usr/include -I/usr/include/python2.7  -I. -I../O.Common -I. -I.. -I../../../include/os/Linux -I../../../include   -I/home/install/epics/base/include/os/Linux -I/home/install/epics/base/include  -I/home/hg/pvDataCPP/include  -I/home/hg/pvAccessCPP/include  -I/home/hg/easyPVACPP/include  -I/home/hg/normativeTypesCPP/include       ../easypva.cpp 
../easypva.cpp: In function ‘void init_module_easypva()’:
../easypva.cpp:499:110: error: no matches converting function ‘put’ to type ‘void (class Channel::*)(const string&, const string&) {aka void (class Channel::*)(const class std::basic_string<char>&, const class std::basic_string<char>&)}’
         .def("putString", static_cast<void(Channel::*)(const std::string&, const std::string&)>(&Channel::put), args("value", "requestDescriptor"), "Assigns string data to the channel PV.\n\n:Parameter: *value* (str) - string value that will be assigned to channel data according to the specified request descriptor\n\n:Parameter: *requestDescriptor* (str) - PV request descriptor\n\n")
                                                                                                              ^
In file included from ../easypva.cpp:40:0:
../Channel.h:27:18: note: candidates are: virtual void Channel::put(const PvObject&)
     virtual void put(const PvObject& pvObject);
                  ^
../Channel.h:26:18: note:                 virtual void Channel::put(const PvObject&, const string&)
     virtual void put(const PvObject& pvObject, const std::string& requestDescriptor);
                  ^
../easypva.cpp:500:104: error: no matches converting function ‘put’ to type ‘void (class Channel::*)(const string&, const string&) {aka void (class Channel::*)(const class std::basic_string<char>&, const class std::basic_string<char>&)}’
         .def("put", static_cast<void(Channel::*)(const std::string&, const std::string&)>(&Channel::put), args("value", "requestDescriptor"), "Assigns string data to the channel PV.\n\n:Parameter: *value* (str) - string value that will be assigned to channel data according to the specified request descriptor\n\n:Parameter: *requestDescriptor* (str) - PV request descriptor\n\n")
                                                                                                        ^
In file included from ../easypva.cpp:40:0:
../Channel.h:27:18: note: candidates are: virtual void Channel::put(const PvObject&)
     virtual void put(const PvObject& pvObject);
                  ^
../Channel.h:26:18: note:                 virtual void Channel::put(const PvObject&, const string&)
     virtual void put(const PvObject& pvObject, const std::string& requestDescriptor);
                  ^
../easypva.cpp:501:90: error: no matches converting function ‘put’ to type ‘void (class Channel::*)(const string&) {aka void (class Channel::*)(const class std::basic_string<char>&)}’
         .def("putString", static_cast<void(Channel::*)(const std::string&)>(&Channel::put), args("value"), "Assigns string data to the channel PV using the default request descriptor 'field(value)'.\n\n:Parameter: *value* (str) - string value that will be assigned to the channel PV\n\n::\n\n    channel = Channel('string01')\n\n    channel.putString('string value')\n\n")
                                                                                          ^
In file included from ../easypva.cpp:40:0:
../Channel.h:27:18: note: candidates are: virtual void Channel::put(const PvObject&)
     virtual void put(const PvObject& pvObject);
                  ^
../Channel.h:26:18: note:                 virtual void Channel::put(const PvObject&, const string&)
     virtual void put(const PvObject& pvObject, const std::string& requestDescriptor);
                  ^
../easypva.cpp:502:84: error: no matches converting function ‘put’ to type ‘void (class Channel::*)(const string&) {aka void (class Channel::*)(const class std::basic_string<char>&)}’
         .def("put", static_cast<void(Channel::*)(const std::string&)>(&Channel::put), args("value"), "Assigns string data to the channel PV using the default request descriptor 'field(value)'.\n\n:Parameter: *value* (str) - string value that will be assigned to the channel PV\n\n::\n\n    channel = Channel('string01')\n\n    channel.put('string value')\n\n")
                                                                                    ^
In file included from ../easypva.cpp:40:0:
../Channel.h:27:18: note: candidates are: virtual void Channel::put(const PvObject&)
     virtual void put(const PvObject& pvObject);
                  ^
../Channel.h:26:18: note:                 virtual void Channel::put(const PvObject&, const string&)
     virtual void put(const PvObject& pvObject, const std::string& requestDescriptor);
                  ^
../easypva.cpp:504:123: error: no matches converting function ‘put’ to type ‘void (class Channel::*)(const class boost::python::list&, const string&) {aka void (class Channel::*)(const class boost::python::list&, const class std::basic_string<char>&)}’
         .def("putScalarArray", static_cast<void(Channel::*)(const boost::python::list&, const std::string&)>(&Channel::put), args("valueList", "requestDescriptor"), "Assigns scalar array data to the channel PV using the default request descriptor 'field(value)'.\n\n:Parameter: *valueList* (list) - list of scalar values that will be assigned to the channel PV\n\n:Parameter: *requestDescriptor* (str) - PV request descriptor\n\n")
                                                                                                                           ^
In file included from ../easypva.cpp:40:0:
../Channel.h:27:18: note: candidates are: virtual void Channel::put(const PvObject&)
     virtual void put(const PvObject& pvObject);
                  ^
../Channel.h:26:18: note:                 virtual void Channel::put(const PvObject&, const string&)
     virtual void put(const PvObject& pvObject, const std::string& requestDescriptor);
                  ^
../easypva.cpp:505:112: error: no matches converting function ‘put’ to type ‘void (class Channel::*)(const class boost::python::list&, const string&) {aka void (class Channel::*)(const class boost::python::list&, const class std::basic_string<char>&)}’
         .def("put", static_cast<void(Channel::*)(const boost::python::list&, const std::string&)>(&Channel::put), args("valueList", "requestDescriptor"), "Assigns scalar array data to the channel PV using the default request descriptor 'field(value)'.\n\n:Parameter: *valueList* (list) - list of scalar values that will be assigned to the channel PV\n\n:Parameter: *requestDescriptor* (str) - PV request descriptor\n\n")
                                                                                                                ^
In file included from ../easypva.cpp:40:0:
../Channel.h:27:18: note: candidates are: virtual void Channel::put(const PvObject&)
     virtual void put(const PvObject& pvObject);
                  ^
../Channel.h:26:18: note:                 virtual void Channel::put(const PvObject&, const string&)
     virtual void put(const PvObject& pvObject, const std::string& requestDescriptor);
                  ^
../easypva.cpp:506:103: error: no matches converting function ‘put’ to type ‘void (class Channel::*)(const class boost::python::list&)’
         .def("putScalarArray", static_cast<void(Channel::*)(const boost::python::list&)>(&Channel::put), args("valueList"), "Assigns scalar array data to the channel PV using the default request descriptor 'field(value)'.\n\n:Parameter: *valueList* (list) - list of scalar values that will be assigned to the channel PV\n\n::\n\n    channel = Channel('intArray01')\n\n    channel.putScalarArray([0,1,2,3,4])\n\n")
                                                                                                       ^
In file included from ../easypva.cpp:40:0:
../Channel.h:27:18: note: candidates are: virtual void Channel::put(const PvObject&)
     virtual void put(const PvObject& pvObject);
                  ^
../Channel.h:26:18: note:                 virtual void Channel::put(const PvObject&, const string&)
     virtual void put(const PvObject& pvObject, const std::string& requestDescriptor);
                  ^
../easypva.cpp:507:92: error: no matches converting function ‘put’ to type ‘void (class Channel::*)(const class boost::python::list&)’
         .def("put", static_cast<void(Channel::*)(const boost::python::list&)>(&Channel::put), args("valueList"), "Assigns scalar array data to the channel PV using the default request descriptor 'field(value)'.\n\n:Parameter: *valueList* (list) - list of scalar values that will be assigned to the channel PV\n\n::\n\n    channel = Channel('intArray01')\n\n    channel.put([0,1,2,3,4])\n\n")
                                                                                            ^
In file included from ../easypva.cpp:40:0:
../Channel.h:27:18: note: candidates are: virtual void Channel::put(const PvObject&)
     virtual void put(const PvObject& pvObject);
                  ^
../Channel.h:26:18: note:                 virtual void Channel::put(const PvObject&, const string&)
     virtual void put(const PvObject& pvObject, const std::string& requestDescriptor);
                  ^
../easypva.cpp:509:97: error: no matches converting function ‘put’ to type ‘void (class Channel::*)(bool, const string&) {aka void (class Channel::*)(bool, const class std::basic_string<char>&)}’
         .def("putBoolean", static_cast<void(Channel::*)(bool, const std::string&)>(&Channel::put), args("value", "requestDescriptor"), "Assigns boolean data to the channel PV.\n\n:Parameter: *value* (bool) - boolean value that will be assigned to channel data according to the specified request descriptor\n\n:Parameter: *requestDescriptor* (str) - PV request descriptor\n\n")
                                                                                                 ^
In file included from ../easypva.cpp:40:0:
../Channel.h:27:18: note: candidates are: virtual void Channel::put(const PvObject&)
     virtual void put(const PvObject& pvObject);
                  ^
../Channel.h:26:18: note:                 virtual void Channel::put(const PvObject&, const string&)
     virtual void put(const PvObject& pvObject, const std::string& requestDescriptor);
                  ^
../easypva.cpp:510:90: error: no matches converting function ‘put’ to type ‘void (class Channel::*)(bool, const string&) {aka void (class Channel::*)(bool, const class std::basic_string<char>&)}’
         .def("put", static_cast<void(Channel::*)(bool, const std::string&)>(&Channel::put), args("value", "requestDescriptor"), "Assigns boolean data to the channel PV.\n\n:Parameter: *value* (bool) - boolean value that will be assigned to channel data according to the specified request descriptor\n\n:Parameter: *requestDescriptor* (str) - PV request descriptor\n\n")
                                                                                          ^
In file included from ../easypva.cpp:40:0:
../Channel.h:27:18: note: candidates are: virtual void Channel::put(const PvObject&)
     virtual void put(const PvObject& pvObject);
                  ^
../Channel.h:26:18: note:                 virtual void Channel::put(const PvObject&, const string&)
     virtual void put(const PvObject& pvObject, const std::string& requestDescriptor);
                  ^
../easypva.cpp:511:77: error: no matches converting function ‘put’ to type ‘void (class Channel::*)(bool)’
         .def("putBoolean", static_cast<void(Channel::*)(bool)>(&Channel::put), args("value"), "Assigns boolean data to the channel PV using the default request descriptor 'field(value)'.\n\n:Parameter: *value* (bool) - boolean value that will be assigned to the channel PV\n\n::\n\n    channel = Channel('boolean01')\n\n    channel.putBoolean(True)\n\n")
                                                                             ^
In file included from ../easypva.cpp:40:0:
../Channel.h:27:18: note: candidates are: virtual void Channel::put(const PvObject&)
     virtual void put(const PvObject& pvObject);
                  ^
../Channel.h:26:18: note:                 virtual void Channel::put(const PvObject&, const string&)
     virtual void put(const PvObject& pvObject, const std::string& requestDescriptor);
                  ^
../easypva.cpp:512:70: error: no matches converting function ‘put’ to type ‘void (class Channel::*)(bool)’
         .def("put", static_cast<void(Channel::*)(bool)>(&Channel::put), args("value"), "Assigns boolean data to the channel PV using the default request descriptor 'field(value)'.\n\n:Parameter: *value* (bool) - boolean value that will be assigned to the channel PV\n\n::\n\n    channel = Channel('boolean01')\n\n    channel.put(True)\n\n")
                                                                      ^
In file included from ../easypva.cpp:40:0:
../Channel.h:27:18: note: candidates are: virtual void Channel::put(const PvObject&)
     virtual void put(const PvObject& pvObject);
                  ^
../Channel.h:26:18: note:                 virtual void Channel::put(const PvObject&, const string&)
     virtual void put(const PvObject& pvObject, const std::string& requestDescriptor);
                  ^
../easypva.cpp:517:94: error: no matches converting function ‘put’ to type ‘void (class Channel::*)(char, const string&) {aka void (class Channel::*)(char, const class std::basic_string<char>&)}’
         .def("putByte", static_cast<void(Channel::*)(char, const std::string&)>(&Channel::put), args("value", "requestDescriptor"), "Assigns byte data to the channel PV.\n\n:Parameter: *value* (str) - byte value that will be assigned to channel data according to the specified request descriptor\n\n:Parameter: *requestDescriptor* (str) - PV request descriptor\n\n")
                                                                                              ^
In file included from ../easypva.cpp:40:0:
../Channel.h:27:18: note: candidates are: virtual void Channel::put(const PvObject&)
     virtual void put(const PvObject& pvObject);
                  ^
../Channel.h:26:18: note:                 virtual void Channel::put(const PvObject&, const string&)
     virtual void put(const PvObject& pvObject, const std::string& requestDescriptor);
                  ^
../easypva.cpp:519:74: error: no matches converting function ‘put’ to type ‘void (class Channel::*)(char)’
         .def("putByte", static_cast<void(Channel::*)(char)>(&Channel::put), args("value"), "Assigns byte data to the channel using the default request descriptor 'field(value)'.\n\n:Parameter: *value* (str) - byte value that will be assigned to the channel PV\n\n::\n\n    channel = Channel('byte01')\n\n    channel.putByte('x')\n\n")
                                                                          ^
In file included from ../easypva.cpp:40:0:
../Channel.h:27:18: note: candidates are: virtual void Channel::put(const PvObject&)
     virtual void put(const PvObject& pvObject);
                  ^
../Channel.h:26:18: note:                 virtual void Channel::put(const PvObject&, const string&)
     virtual void put(const PvObject& pvObject, const std::string& requestDescriptor);
                  ^
../easypva.cpp:522:104: error: no matches converting function ‘put’ to type ‘void (class Channel::*)(unsigned char, const string&) {aka void (class Channel::*)(unsigned char, const class std::basic_string<char>&)}’
         .def("putUByte", static_cast<void(Channel::*)(unsigned char, const std::string&)>(&Channel::put), args("value", "requestDescriptor"), "Assigns unsigned byte data to the channel PV.\n\n:Parameter: *value* (int) - unsigned byte value that will be assigned to channel data according to the specified request descriptor\n\n:Parameter: *requestDescriptor* (str) - PV request descriptor\n\n")
                                                                                                        ^
In file included from ../easypva.cpp:40:0:
../Channel.h:27:18: note: candidates are: virtual void Channel::put(const PvObject&)
     virtual void put(const PvObject& pvObject);
                  ^
../Channel.h:26:18: note:                 virtual void Channel::put(const PvObject&, const string&)
     virtual void put(const PvObject& pvObject, const std::string& requestDescriptor);
                  ^
../easypva.cpp:523:99: error: no matches converting function ‘put’ to type ‘void (class Channel::*)(unsigned char, const string&) {aka void (class Channel::*)(unsigned char, const class std::basic_string<char>&)}’
         .def("put", static_cast<void(Channel::*)(unsigned char, const std::string&)>(&Channel::put), args("value", "requestDescriptor"), "Assigns unsigned byte data to the channel PV.\n\n:Parameter: *value* (int) - unsigned byte value that will be assigned to channel data according to the specified request descriptor\n\n:Parameter: *requestDescriptor* (str) - PV request descriptor\n\n")
                                                                                                   ^
In file included from ../easypva.cpp:40:0:
../Channel.h:27:18: note: candidates are: virtual void Channel::put(const PvObject&)
     virtual void put(const PvObject& pvObject);
                  ^
../Channel.h:26:18: note:                 virtual void Channel::put(const PvObject&, const string&)
     virtual void put(const PvObject& pvObject, const std::string& requestDescriptor);
                  ^
../easypva.cpp:524:84: error: no matches converting function ‘put’ to type ‘void (class Channel::*)(unsigned char)’
         .def("putUByte", static_cast<void(Channel::*)(unsigned char)>(&Channel::put), args("value"), "Assigns unsigned byte data to the channel PV using the default request descriptor 'field(value)'.\n\n:Parameter: *value* (int) - unsigned byte value that will be assigned to the channel PV\n\n::\n\n    channel = Channel('ubyte01')\n\n    channel.putUByte(10)\n\n")
                                                                                    ^
In file included from ../easypva.cpp:40:0:
../Channel.h:27:18: note: candidates are: virtual void Channel::put(const PvObject&)
     virtual void put(const PvObject& pvObject);
                  ^
../Channel.h:26:18: note:                 virtual void Channel::put(const PvObject&, const string&)
     virtual void put(const PvObject& pvObject, const std::string& requestDescriptor);
                  ^
../easypva.cpp:525:79: error: no matches converting function ‘put’ to type ‘void (class Channel::*)(unsigned char)’
         .def("put", static_cast<void(Channel::*)(unsigned char)>(&Channel::put), args("value"), "Assigns unsigned byte data to the channel PV using the default request descriptor 'field(value)'.\n\n:Parameter: *value* (int) - unsigned byte value that will be assigned to the channel PV\n\n::\n\n    channel = Channel('ubyte01')\n\n    channel.put(10)\n\n")
                                                                               ^
In file included from ../easypva.cpp:40:0:
../Channel.h:27:18: note: candidates are: virtual void Channel::put(const PvObject&)
     virtual void put(const PvObject& pvObject);
                  ^
../Channel.h:26:18: note:                 virtual void Channel::put(const PvObject&, const string&)
     virtual void put(const PvObject& pvObject, const std::string& requestDescriptor);
                  ^
../easypva.cpp:527:96: error: no matches converting function ‘put’ to type ‘void (class Channel::*)(short int, const string&) {aka void (class Channel::*)(short int, const class std::basic_string<char>&)}’
         .def("putShort", static_cast<void(Channel::*)(short, const std::string&)>(&Channel::put), args("value", "requestDescriptor"), "Assigns short data to the channel PV.\n\n:Parameter: *value* (int) - short value that will be assigned to channel data according to the specified request descriptor\n\n:Parameter: *requestDescriptor* (str) - PV request descriptor\n\n")
                                                                                                ^
In file included from ../easypva.cpp:40:0:
../Channel.h:27:18: note: candidates are: virtual void Channel::put(const PvObject&)
     virtual void put(const PvObject& pvObject);
                  ^
../Channel.h:26:18: note:                 virtual void Channel::put(const PvObject&, const string&)
     virtual void put(const PvObject& pvObject, const std::string& requestDescriptor);
                  ^
../easypva.cpp:528:91: error: no matches converting function ‘put’ to type ‘void (class Channel::*)(short int, const string&) {aka void (class Channel::*)(short int, const class std::basic_string<char>&)}’
         .def("put", static_cast<void(Channel::*)(short, const std::string&)>(&Channel::put), args("value", "requestDescriptor"), "Assigns short data to the channel PV.\n\n:Parameter: *value* (int) - short value that will be assigned to channel data according to the specified request descriptor\n\n:Parameter: *requestDescriptor* (str) - PV request descriptor\n\n")
                                                                                           ^
In file included from ../easypva.cpp:40:0:
../Channel.h:27:18: note: candidates are: virtual void Channel::put(const PvObject&)
     virtual void put(const PvObject& pvObject);
                  ^
../Channel.h:26:18: note:                 virtual void Channel::put(const PvObject&, const string&)
     virtual void put(const PvObject& pvObject, const std::string& requestDescriptor);
                  ^
../easypva.cpp:529:76: error: no matches converting function ‘put’ to type ‘void (class Channel::*)(short int)’
         .def("putShort", static_cast<void(Channel::*)(short)>(&Channel::put), args("value"), "Assigns short data to the channel PV using the default request descriptor 'field(value)'.\n\n:Parameter: *value* (int) - short value that will be assigned to the channel PV\n\n::\n\n    channel = Channel('short01')\n\n    channel.putShort(10)\n\n")
                                                                            ^
In file included from ../easypva.cpp:40:0:
../Channel.h:27:18: note: candidates are: virtual void Channel::put(const PvObject&)
     virtual void put(const PvObject& pvObject);
                  ^
../Channel.h:26:18: note:                 virtual void Channel::put(const PvObject&, const string&)
     virtual void put(const PvObject& pvObject, const std::string& requestDescriptor);
                  ^
../easypva.cpp:530:71: error: no matches converting function ‘put’ to type ‘void (class Channel::*)(short int)’
         .def("put", static_cast<void(Channel::*)(short)>(&Channel::put), args("value"), "Assigns short data to the channel PV using the default request descriptor 'field(value)'.\n\n:Parameter: *value* (int) - short value that will be assigned to the channel PV\n\n::\n\n    channel = Channel('short01')\n\n    channel.put(10)\n\n")
                                                                       ^
In file included from ../easypva.cpp:40:0:
../Channel.h:27:18: note: candidates are: virtual void Channel::put(const PvObject&)
     virtual void put(const PvObject& pvObject);
                  ^
../Channel.h:26:18: note:                 virtual void Channel::put(const PvObject&, const string&)
     virtual void put(const PvObject& pvObject, const std::string& requestDescriptor);
                  ^
../easypva.cpp:532:106: error: no matches converting function ‘put’ to type ‘void (class Channel::*)(short unsigned int, const string&) {aka void (class Channel::*)(short unsigned int, const class std::basic_string<char>&)}’
         .def("putUShort", static_cast<void(Channel::*)(unsigned short, const std::string&)>(&Channel::put), args("value", "requestDescriptor"), "Assigns unsigned short data to the channel PV.\n\n:Parameter: *value* (int) - unsigned short value that will be assigned to channel data according to the specified request descriptor\n\n:Parameter: *requestDescriptor* (str) - PV request descriptor\n\n")
                                                                                                          ^
In file included from ../easypva.cpp:40:0:
../Channel.h:27:18: note: candidates are: virtual void Channel::put(const PvObject&)
     virtual void put(const PvObject& pvObject);
                  ^
../Channel.h:26:18: note:                 virtual void Channel::put(const PvObject&, const string&)
     virtual void put(const PvObject& pvObject, const std::string& requestDescriptor);
                  ^
../easypva.cpp:533:100: error: no matches converting function ‘put’ to type ‘void (class Channel::*)(short unsigned int, const string&) {aka void (class Channel::*)(short unsigned int, const class std::basic_string<char>&)}’
         .def("put", static_cast<void(Channel::*)(unsigned short, const std::string&)>(&Channel::put), args("value", "requestDescriptor"), "Assigns unsigned short data to the channel PV.\n\n:Parameter: *value* (int) - unsigned short value that will be assigned to channel data according to the specified request descriptor\n\n:Parameter: *requestDescriptor* (str) - PV request descriptor\n\n")
                                                                                                    ^
In file included from ../easypva.cpp:40:0:
../Channel.h:27:18: note: candidates are: virtual void Channel::put(const PvObject&)
     virtual void put(const PvObject& pvObject);
                  ^
../Channel.h:26:18: note:                 virtual void Channel::put(const PvObject&, const string&)
     virtual void put(const PvObject& pvObject, const std::string& requestDescriptor);
                  ^
../easypva.cpp:534:86: error: no matches converting function ‘put’ to type ‘void (class Channel::*)(short unsigned int)’
         .def("putUShort", static_cast<void(Channel::*)(unsigned short)>(&Channel::put), args("value"), "Assigns unsigned short data to the channel PV using the default request descriptor 'field(value)'.\n\n:Parameter: *value* (int) - unsigned short value that will be assigned to the channel PV\n\n::\n\n    channel = Channel('ushort01')\n\n    channel.putUShort(10)\n\n")
                                                                                      ^
In file included from ../easypva.cpp:40:0:
../Channel.h:27:18: note: candidates are: virtual void Channel::put(const PvObject&)
     virtual void put(const PvObject& pvObject);
                  ^
../Channel.h:26:18: note:                 virtual void Channel::put(const PvObject&, const string&)
     virtual void put(const PvObject& pvObject, const std::string& requestDescriptor);
                  ^
../easypva.cpp:535:80: error: no matches converting function ‘put’ to type ‘void (class Channel::*)(short unsigned int)’
         .def("put", static_cast<void(Channel::*)(unsigned short)>(&Channel::put), args("value"), "Assigns unsigned short data to the channel PV using the default request descriptor 'field(value)'.\n\n:Parameter: *value* (int) - unsigned short value that will be assigned to the channel PV\n\n::\n\n    channel = Channel('ushort01')\n\n    channel.put(10)\n\n")
                                                                                ^
In file included from ../easypva.cpp:40:0:
../Channel.h:27:18: note: candidates are: virtual void Channel::put(const PvObject&)
     virtual void put(const PvObject& pvObject);
                  ^
../Channel.h:26:18: note:                 virtual void Channel::put(const PvObject&, const string&)
     virtual void put(const PvObject& pvObject, const std::string& requestDescriptor);
                  ^
../easypva.cpp:537:92: error: no matches converting function ‘put’ to type ‘void (class Channel::*)(int, const string&) {aka void (class Channel::*)(int, const class std::basic_string<char>&)}’
         .def("putInt", static_cast<void(Channel::*)(int, const std::string&)>(&Channel::put), args("value", "requestDescriptor"), "Assigns integer data to the channel PV.\n\n:Parameter: *value* (int) - integer value that will be assigned to channel data according to the specified request descriptor\n\n:Parameter: *requestDescriptor* (str) - PV request descriptor\n\n")
                                                                                            ^
In file included from ../easypva.cpp:40:0:
../Channel.h:27:18: note: candidates are: virtual void Channel::put(const PvObject&)
     virtual void put(const PvObject& pvObject);
                  ^
../Channel.h:26:18: note:                 virtual void Channel::put(const PvObject&, const string&)
     virtual void put(const PvObject& pvObject, const std::string& requestDescriptor);
                  ^
../easypva.cpp:538:89: error: no matches converting function ‘put’ to type ‘void (class Channel::*)(int, const string&) {aka void (class Channel::*)(int, const class std::basic_string<char>&)}’
         .def("put", static_cast<void(Channel::*)(int, const std::string&)>(&Channel::put), args("value", "requestDescriptor"), "Assigns integer data to the channel PV.\n\n:Parameter: *value* (int) - integer value that will be assigned to channel data according to the specified request descriptor\n\n:Parameter: *requestDescriptor* (str) - PV request descriptor\n\n")
                                                                                         ^
In file included from ../easypva.cpp:40:0:
../Channel.h:27:18: note: candidates are: virtual void Channel::put(const PvObject&)
     virtual void put(const PvObject& pvObject);
                  ^
../Channel.h:26:18: note:                 virtual void Channel::put(const PvObject&, const string&)
     virtual void put(const PvObject& pvObject, const std::string& requestDescriptor);
                  ^
../easypva.cpp:539:72: error: no matches converting function ‘put’ to type ‘void (class Channel::*)(int)’
         .def("putInt", static_cast<void(Channel::*)(int)>(&Channel::put), args("value"), "Assigns integer data to the channel PV using the default request descriptor 'field(value)'.\n\n:Parameter: *value* (int) - integer value that will be assigned to the channel PV\n\n::\n\n    channel = Channel('int01')\n\n    channel.putInt(1000)\n\n")
                                                                        ^
In file included from ../easypva.cpp:40:0:
../Channel.h:27:18: note: candidates are: virtual void Channel::put(const PvObject&)
     virtual void put(const PvObject& pvObject);
                  ^
../Channel.h:26:18: note:                 virtual void Channel::put(const PvObject&, const string&)
     virtual void put(const PvObject& pvObject, const std::string& requestDescriptor);
                  ^
../easypva.cpp:540:69: error: no matches converting function ‘put’ to type ‘void (class Channel::*)(int)’
         .def("put", static_cast<void(Channel::*)(int)>(&Channel::put), args("value"), "Assigns integer data to the channel PV using the default request descriptor 'field(value)'.\n\n:Parameter: *value* (int) - integer value that will be assigned to the channel PV\n\n::\n\n    channel = Channel('int01')\n\n    channel.put(1000)\n\n")
                                                                     ^
In file included from ../easypva.cpp:40:0:
../Channel.h:27:18: note: candidates are: virtual void Channel::put(const PvObject&)
     virtual void put(const PvObject& pvObject);
                  ^
../Channel.h:26:18: note:                 virtual void Channel::put(const PvObject&, const string&)
     virtual void put(const PvObject& pvObject, const std::string& requestDescriptor);
                  ^
../easypva.cpp:542:102: error: no matches converting function ‘put’ to type ‘void (class Channel::*)(unsigned int, const string&) {aka void (class Channel::*)(unsigned int, const class std::basic_string<char>&)}’
         .def("putUInt", static_cast<void(Channel::*)(unsigned int, const std::string&)>(&Channel::put), args("value", "requestDescriptor"), "Assigns unsigned integer data to the channel PV.\n\n:Parameter: *value* (int) - unsigned integer value that will be assigned to channel data according to the specified request descriptor\n\n:Parameter: *requestDescriptor* (str) - PV request descriptor\n\n")
                                                                                                      ^
In file included from ../easypva.cpp:40:0:
../Channel.h:27:18: note: candidates are: virtual void Channel::put(const PvObject&)
     virtual void put(const PvObject& pvObject);
                  ^
../Channel.h:26:18: note:                 virtual void Channel::put(const PvObject&, const string&)
     virtual void put(const PvObject& pvObject, const std::string& requestDescriptor);
                  ^
../easypva.cpp:543:82: error: no matches converting function ‘put’ to type ‘void (class Channel::*)(unsigned int)’
         .def("putUInt", static_cast<void(Channel::*)(unsigned int)>(&Channel::put), args("value"), "Assigns unsigned integer data to the channel PV using the default request descriptor 'field(value)'.\n\n:Parameter: *value* (int) - unsigned integer value that will be assigned to the channel PV\n\n::\n\n    channel = Channel('uint01')\n\n    channel.putUInt(1000)\n\n")
                                                                                  ^
In file included from ../easypva.cpp:40:0:
../Channel.h:27:18: note: candidates are: virtual void Channel::put(const PvObject&)
     virtual void put(const PvObject& pvObject);
                  ^
../Channel.h:26:18: note:                 virtual void Channel::put(const PvObject&, const string&)
     virtual void put(const PvObject& pvObject, const std::string& requestDescriptor);
                  ^
../easypva.cpp:545:99: error: no matches converting function ‘put’ to type ‘void (class Channel::*)(long long int, const string&) {aka void (class Channel::*)(long long int, const class std::basic_string<char>&)}’
         .def("putLong", static_cast<void(Channel::*)(long long, const std::string&)>(&Channel::put), args("value", "requestDescriptor"), "Assigns long data to the channel PV.\n\n:Parameter: *value* (long) - long value that will be assigned to channel data according to the specified request descriptor\n\n:Parameter: *requestDescriptor* (str) - PV request descriptor\n\n")
                                                                                                   ^
In file included from ../easypva.cpp:40:0:
../Channel.h:27:18: note: candidates are: virtual void Channel::put(const PvObject&)
     virtual void put(const PvObject& pvObject);
                  ^
../Channel.h:26:18: note:                 virtual void Channel::put(const PvObject&, const string&)
     virtual void put(const PvObject& pvObject, const std::string& requestDescriptor);
                  ^
../easypva.cpp:546:95: error: no matches converting function ‘put’ to type ‘void (class Channel::*)(long long int, const string&) {aka void (class Channel::*)(long long int, const class std::basic_string<char>&)}’
         .def("put", static_cast<void(Channel::*)(long long, const std::string&)>(&Channel::put), args("value", "requestDescriptor"), "Assigns long data to the channel PV.\n\n:Parameter: *value* (long) - long value that will be assigned to channel data according to the specified request descriptor\n\n:Parameter: *requestDescriptor* (str) - PV request descriptor\n\n")
                                                                                               ^
In file included from ../easypva.cpp:40:0:
../Channel.h:27:18: note: candidates are: virtual void Channel::put(const PvObject&)
     virtual void put(const PvObject& pvObject);
                  ^
../Channel.h:26:18: note:                 virtual void Channel::put(const PvObject&, const string&)
     virtual void put(const PvObject& pvObject, const std::string& requestDescriptor);
                  ^
../easypva.cpp:547:79: error: no matches converting function ‘put’ to type ‘void (class Channel::*)(long long int)’
         .def("putLong", static_cast<void(Channel::*)(long long)>(&Channel::put), args("value"), "Assigns long data to the channel PV using the default request descriptor 'field(value)'.\n\n:Parameter: *value* (long) - long value that will be assigned to the channel PV\n\n::\n\n    channel = Channel('long01')\n\n    channel.putLong(100000L)\n\n")
                                                                               ^
In file included from ../easypva.cpp:40:0:
../Channel.h:27:18: note: candidates are: virtual void Channel::put(const PvObject&)
     virtual void put(const PvObject& pvObject);
                  ^
../Channel.h:26:18: note:                 virtual void Channel::put(const PvObject&, const string&)
     virtual void put(const PvObject& pvObject, const std::string& requestDescriptor);
                  ^
../easypva.cpp:548:75: error: no matches converting function ‘put’ to type ‘void (class Channel::*)(long long int)’
         .def("put", static_cast<void(Channel::*)(long long)>(&Channel::put), args("value"), "Assigns long data to the channel PV using the default request descriptor 'field(value)'.\n\n:Parameter: *value* (long) - long value that will be assigned to the channel PV\n\n::\n\n    channel = Channel('long01')\n\n    channel.put(100000L)\n\n")
                                                                           ^
In file included from ../easypva.cpp:40:0:
../Channel.h:27:18: note: candidates are: virtual void Channel::put(const PvObject&)
     virtual void put(const PvObject& pvObject);
                  ^
../Channel.h:26:18: note:                 virtual void Channel::put(const PvObject&, const string&)
     virtual void put(const PvObject& pvObject, const std::string& requestDescriptor);
                  ^
../easypva.cpp:550:109: error: no matches converting function ‘put’ to type ‘void (class Channel::*)(long long unsigned int, const string&) {aka void (class Channel::*)(long long unsigned int, const class std::basic_string<char>&)}’
         .def("putULong", static_cast<void(Channel::*)(unsigned long long, const std::string&)>(&Channel::put), args("value", "requestDescriptor"), "Assigns unsigned long data to the channel PV.\n\n:Parameter: *value* (long) - unsigned long value that will be assigned to channel data according to the specified request descriptor\n\n:Parameter: *requestDescriptor* (str) - PV request descriptor\n\n")
                                                                                                             ^
In file included from ../easypva.cpp:40:0:
../Channel.h:27:18: note: candidates are: virtual void Channel::put(const PvObject&)
     virtual void put(const PvObject& pvObject);
                  ^
../Channel.h:26:18: note:                 virtual void Channel::put(const PvObject&, const string&)
     virtual void put(const PvObject& pvObject, const std::string& requestDescriptor);
                  ^
../easypva.cpp:551:89: error: no matches converting function ‘put’ to type ‘void (class Channel::*)(long long unsigned int)’
         .def("putULong", static_cast<void(Channel::*)(unsigned long long)>(&Channel::put), args("value"), "Assigns unsigned long data to the channel PV using the default request descriptor 'field(value)'.\n\n:Parameter: *value* (long) - unsigned long value that will be assigned to the channel PV\n\n::\n\n    channel = Channel('ulong01')\n\n    channel.putULong(100000L)\n\n")
                                                                                         ^
In file included from ../easypva.cpp:40:0:
../Channel.h:27:18: note: candidates are: virtual void Channel::put(const PvObject&)
     virtual void put(const PvObject& pvObject);
                  ^
../Channel.h:26:18: note:                 virtual void Channel::put(const PvObject&, const string&)
     virtual void put(const PvObject& pvObject, const std::string& requestDescriptor);
                  ^
../easypva.cpp:553:96: error: no matches converting function ‘put’ to type ‘void (class Channel::*)(float, const string&) {aka void (class Channel::*)(float, const class std::basic_string<char>&)}’
         .def("putFloat", static_cast<void(Channel::*)(float, const std::string&)>(&Channel::put), args("value", "requestDescriptor"), "Assigns float data to the channel PV.\n\n:Parameter: *value* (float) - float value that will be assigned to channel data according to the specified request descriptor\n\n:Parameter: *requestDescriptor* (str) - PV request descriptor\n\n")
                                                                                                ^
In file included from ../easypva.cpp:40:0:
../Channel.h:27:18: note: candidates are: virtual void Channel::put(const PvObject&)
     virtual void put(const PvObject& pvObject);
                  ^
../Channel.h:26:18: note:                 virtual void Channel::put(const PvObject&, const string&)
     virtual void put(const PvObject& pvObject, const std::string& requestDescriptor);
                  ^
../easypva.cpp:554:91: error: no matches converting function ‘put’ to type ‘void (class Channel::*)(float, const string&) {aka void (class Channel::*)(float, const class std::basic_string<char>&)}’
         .def("put", static_cast<void(Channel::*)(float, const std::string&)>(&Channel::put), args("value", "requestDescriptor"), "Assigns float data to the channel PV.\n\n:Parameter: *value* (float) - float value that will be assigned to channel data according to the specified request descriptor\n\n:Parameter: *requestDescriptor* (str) - PV request descriptor\n\n")
                                                                                           ^
In file included from ../easypva.cpp:40:0:
../Channel.h:27:18: note: candidates are: virtual void Channel::put(const PvObject&)
     virtual void put(const PvObject& pvObject);
                  ^
../Channel.h:26:18: note:                 virtual void Channel::put(const PvObject&, const string&)
     virtual void put(const PvObject& pvObject, const std::string& requestDescriptor);
                  ^
../easypva.cpp:555:76: error: no matches converting function ‘put’ to type ‘void (class Channel::*)(float)’
         .def("putFloat", static_cast<void(Channel::*)(float)>(&Channel::put), args("value"), "Assigns float data to the channel PV using the default request descriptor 'field(value)'.\n\n:Parameter: *value* (float) - float value that will be assigned to the channel PV\n\n::\n\n    channel = Channel('float01')\n\n    channel.putFloat(1.1)\n\n")
                                                                            ^
In file included from ../easypva.cpp:40:0:
../Channel.h:27:18: note: candidates are: virtual void Channel::put(const PvObject&)
     virtual void put(const PvObject& pvObject);
                  ^
../Channel.h:26:18: note:                 virtual void Channel::put(const PvObject&, const string&)
     virtual void put(const PvObject& pvObject, const std::string& requestDescriptor);
                  ^
../easypva.cpp:556:71: error: no matches converting function ‘put’ to type ‘void (class Channel::*)(float)’
         .def("put", static_cast<void(Channel::*)(float)>(&Channel::put), args("value"), "Assigns float data to the channel PV using the default request descriptor 'field(value)'.\n\n:Parameter: *value* (float) - float value that will be assigned to the channel PV\n\n::\n\n    channel = Channel('float01')\n\n    channel.put(1.1)\n\n")
                                                                       ^
In file included from ../easypva.cpp:40:0:
../Channel.h:27:18: note: candidates are: virtual void Channel::put(const PvObject&)
     virtual void put(const PvObject& pvObject);
                  ^
../Channel.h:26:18: note:                 virtual void Channel::put(const PvObject&, const string&)
     virtual void put(const PvObject& pvObject, const std::string& requestDescriptor);
                  ^
../easypva.cpp:558:98: error: no matches converting function ‘put’ to type ‘void (class Channel::*)(double, const string&) {aka void (class Channel::*)(double, const class std::basic_string<char>&)}’
         .def("putDouble", static_cast<void(Channel::*)(double, const std::string&)>(&Channel::put), args("value", "requestDescriptor"), "Assigns double data to the channel PV.\n\n:Parameter: *value* (float) - double value that will be assigned to channel data according to the specified request descriptor\n\n:Parameter: *requestDescriptor* (str) - PV request descriptor\n\n")
                                                                                                  ^
In file included from ../easypva.cpp:40:0:
../Channel.h:27:18: note: candidates are: virtual void Channel::put(const PvObject&)
     virtual void put(const PvObject& pvObject);
                  ^
../Channel.h:26:18: note:                 virtual void Channel::put(const PvObject&, const string&)
     virtual void put(const PvObject& pvObject, const std::string& requestDescriptor);
                  ^
../easypva.cpp:559:92: error: no matches converting function ‘put’ to type ‘void (class Channel::*)(double, const string&) {aka void (class Channel::*)(double, const class std::basic_string<char>&)}’
         .def("put", static_cast<void(Channel::*)(double, const std::string&)>(&Channel::put), args("value", "requestDescriptor"), "Assigns double data to the channel PV.\n\n:Parameter: *value* (float) - double value that will be assigned to channel data according to the specified request descriptor\n\n:Parameter: *requestDescriptor* (str) - PV request descriptor\n\n")
                                                                                            ^
In file included from ../easypva.cpp:40:0:
../Channel.h:27:18: note: candidates are: virtual void Channel::put(const PvObject&)
     virtual void put(const PvObject& pvObject);
                  ^
../Channel.h:26:18: note:                 virtual void Channel::put(const PvObject&, const string&)
     virtual void put(const PvObject& pvObject, const std::string& requestDescriptor);
                  ^
../easypva.cpp:560:78: error: no matches converting function ‘put’ to type ‘void (class Channel::*)(double)’
         .def("putDouble", static_cast<void(Channel::*)(double)>(&Channel::put), args("value"), "Puts double data into the channel using the default request descriptor 'field(value)'.\n\n:Parameter: *value* (float) - double value that will be assigned to the channel PV\n\n::\n\n    channel = Channel('double01')\n\n    channel.putDouble(1.1)\n\n")
                                                                              ^
In file included from ../easypva.cpp:40:0:
../Channel.h:27:18: note: candidates are: virtual void Channel::put(const PvObject&)
     virtual void put(const PvObject& pvObject);
                  ^
../Channel.h:26:18: note:                 virtual void Channel::put(const PvObject&, const string&)
     virtual void put(const PvObject& pvObject, const std::string& requestDescriptor);
                  ^
../easypva.cpp:561:72: error: no matches converting function ‘put’ to type ‘void (class Channel::*)(double)’
         .def("put", static_cast<void(Channel::*)(double)>(&Channel::put), args("value"), "Puts double data into the channel using the default request descriptor 'field(value)'.\n\n:Parameter: *value* (float) - double value that will be assigned to the channel PV\n\n::\n\n    channel = Channel('double01')\n\n    channel.put(1.1)\n\n")
                                                                        ^
In file included from ../easypva.cpp:40:0:
../Channel.h:27:18: note: candidates are: virtual void Channel::put(const PvObject&)
     virtual void put(const PvObject& pvObject);
                  ^
../Channel.h:26:18: note:                 virtual void Channel::put(const PvObject&, const string&)
     virtual void put(const PvObject& pvObject, const std::string& requestDescriptor);
                  ^
make[1]: *** [easypva.o] Error 1
make[1]: Leaving directory `/home/hg/pvaPy/src/easypva/O.linux-x86_64'
make: *** [install.linux-x86_64] Error 2
